{"ast":null,"code":"// import cartService from \"../service/cart.service\";\nimport { Role, RoutePaths } from \"./enum\";\n\n// const addToCart = async (book, id) => {\n//   return cartService\n//     .add({\n//       userId: id,\n//       bookId: book.id,\n//       quantity: 1,\n//     })\n//     .then((res) => {\n//       return { error: false, message: \"Item added in cart\" };\n//     })\n//     .catch((e) => {\n//       if (e.status === 500)\n//         return { error: true, message: \"Item already in the cart\" };\n//       else return { error: true, message: \"something went wrong\" };\n//     });\n// };\n\nconst messages = {\n  USER_DELETE: \"Are you sure you want to delete this user?\",\n  UPDATED_SUCCESS: \"Record updated successfully\",\n  UPDATED_FAIL: \"Record cannot be updated\",\n  DELETE_SUCCESS: \"Record deleted successfully\",\n  DELETE_FAIL: \"Record cannot be deleted\",\n  ORDER_SUCCESS: \"Your order is successfully placed\"\n};\nconst LocalStorageKeys = {\n  USER: \"user\"\n};\nconst NavigationItems = [{\n  name: \"Users\",\n  route: RoutePaths.User,\n  access: [Role.Admin, Role.Buyer, Role.Seller]\n}, {\n  name: \"Categories\",\n  route: RoutePaths.Category,\n  access: [Role.Admin, Role.Buyer, Role.Seller]\n}, {\n  name: \"Books\",\n  route: RoutePaths.Book,\n  access: [Role.Admin, Role.Buyer, Role.Seller]\n}, {\n  name: \"Update Profile\",\n  route: RoutePaths.UpdateProfile,\n  access: [Role.Admin, Role.Buyer, Role.Seller]\n}];\nconst hasAccess = (pathname, user) => {\n  const navItem = NavigationItems.find(x => pathname.includes(x.route));\n  if (navItem) {\n    return !navItem.access || !!(navItem.access && navItem.access.includes(user.roleId));\n  }\n  return true;\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  hasAccess,\n  // addToCart,\n  messages,\n  LocalStorageKeys,\n  NavigationItems\n};","map":{"version":3,"names":["Role","RoutePaths","messages","USER_DELETE","UPDATED_SUCCESS","UPDATED_FAIL","DELETE_SUCCESS","DELETE_FAIL","ORDER_SUCCESS","LocalStorageKeys","USER","NavigationItems","name","route","User","access","Admin","Buyer","Seller","Category","Book","UpdateProfile","hasAccess","pathname","user","navItem","find","x","includes","roleId"],"sources":["C:/Users/POOJA/bookk/src/utils/shared.js"],"sourcesContent":["// import cartService from \"../service/cart.service\";\r\nimport { Role, RoutePaths } from \"./enum\";\r\n\r\n// const addToCart = async (book, id) => {\r\n//   return cartService\r\n//     .add({\r\n//       userId: id,\r\n//       bookId: book.id,\r\n//       quantity: 1,\r\n//     })\r\n//     .then((res) => {\r\n//       return { error: false, message: \"Item added in cart\" };\r\n//     })\r\n//     .catch((e) => {\r\n//       if (e.status === 500)\r\n//         return { error: true, message: \"Item already in the cart\" };\r\n//       else return { error: true, message: \"something went wrong\" };\r\n//     });\r\n// };\r\n\r\nconst messages = {\r\n  USER_DELETE: \"Are you sure you want to delete this user?\",\r\n  UPDATED_SUCCESS: \"Record updated successfully\",\r\n  UPDATED_FAIL: \"Record cannot be updated\",\r\n  DELETE_SUCCESS: \"Record deleted successfully\",\r\n  DELETE_FAIL: \"Record cannot be deleted\",\r\n  ORDER_SUCCESS: \"Your order is successfully placed\",\r\n};\r\n\r\nconst LocalStorageKeys = {\r\n  USER: \"user\",\r\n};\r\n\r\nconst NavigationItems = [\r\n  {\r\n    name: \"Users\",\r\n    route: RoutePaths.User,\r\n    access: [Role.Admin, Role.Buyer, Role.Seller],\r\n    \r\n  },\r\n  {\r\n    name: \"Categories\",\r\n    route: RoutePaths.Category,\r\n    access: [Role.Admin, Role.Buyer, Role.Seller],\r\n   \r\n  },\r\n  {\r\n    name: \"Books\",\r\n    route: RoutePaths.Book,\r\n    access: [Role.Admin, Role.Buyer, Role.Seller],\r\n    \r\n  },\r\n  {\r\n    name: \"Update Profile\",\r\n    route: RoutePaths.UpdateProfile,\r\n    access: [Role.Admin, Role.Buyer, Role.Seller],\r\n  },\r\n];\r\n\r\nconst hasAccess = (pathname, user) => {\r\n  const navItem = NavigationItems.find((x) => pathname.includes(x.route));\r\n  if (navItem) {\r\n    return (\r\n      !navItem.access ||\r\n      !!(navItem.access && navItem.access.includes(user.roleId))\r\n    );\r\n  }\r\n  return true;\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  hasAccess,\r\n  // addToCart,\r\n  messages,\r\n  LocalStorageKeys,\r\n  NavigationItems,\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,IAAI,EAAEC,UAAU,QAAQ,QAAQ;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG;EACfC,WAAW,EAAE,4CAA4C;EACzDC,eAAe,EAAE,6BAA6B;EAC9CC,YAAY,EAAE,0BAA0B;EACxCC,cAAc,EAAE,6BAA6B;EAC7CC,WAAW,EAAE,0BAA0B;EACvCC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACvBC,IAAI,EAAE;AACR,CAAC;AAED,MAAMC,eAAe,GAAG,CACtB;EACEC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAEZ,UAAU,CAACa,IAAI;EACtBC,MAAM,EAAE,CAACf,IAAI,CAACgB,KAAK,EAAEhB,IAAI,CAACiB,KAAK,EAAEjB,IAAI,CAACkB,MAAM;AAE9C,CAAC,EACD;EACEN,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAEZ,UAAU,CAACkB,QAAQ;EAC1BJ,MAAM,EAAE,CAACf,IAAI,CAACgB,KAAK,EAAEhB,IAAI,CAACiB,KAAK,EAAEjB,IAAI,CAACkB,MAAM;AAE9C,CAAC,EACD;EACEN,IAAI,EAAE,OAAO;EACbC,KAAK,EAAEZ,UAAU,CAACmB,IAAI;EACtBL,MAAM,EAAE,CAACf,IAAI,CAACgB,KAAK,EAAEhB,IAAI,CAACiB,KAAK,EAAEjB,IAAI,CAACkB,MAAM;AAE9C,CAAC,EACD;EACEN,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAEZ,UAAU,CAACoB,aAAa;EAC/BN,MAAM,EAAE,CAACf,IAAI,CAACgB,KAAK,EAAEhB,IAAI,CAACiB,KAAK,EAAEjB,IAAI,CAACkB,MAAM;AAC9C,CAAC,CACF;AAED,MAAMI,SAAS,GAAGA,CAACC,QAAQ,EAAEC,IAAI,KAAK;EACpC,MAAMC,OAAO,GAAGd,eAAe,CAACe,IAAI,CAAEC,CAAC,IAAKJ,QAAQ,CAACK,QAAQ,CAACD,CAAC,CAACd,KAAK,CAAC,CAAC;EACvE,IAAIY,OAAO,EAAE;IACX,OACE,CAACA,OAAO,CAACV,MAAM,IACf,CAAC,EAAEU,OAAO,CAACV,MAAM,IAAIU,OAAO,CAACV,MAAM,CAACa,QAAQ,CAACJ,IAAI,CAACK,MAAM,CAAC,CAAC;EAE9D;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,eAAe;EACbP,SAAS;EACT;EACApB,QAAQ;EACRO,gBAAgB;EAChBE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}